(this.webpackJsonpclient=this.webpackJsonpclient||[]).push([[0],{1e3:function(f,e,n){},1001:function(f,e,n){"use strict";n.r(e);var t=n(7),a=n.n(t),r=n(420),s=n.n(r),o=(n(439),n(27)),i=n(127),b=n(26),d=(n(440),n(80)),c=n(10),l=function(){var f=Object(d.b)(),e=f.loadWeb3Modal,n=f.logoutOfWeb3Modal,t=f.address;return Object(c.jsxs)("div",{class:"header",children:[Object(c.jsx)("img",{src:"/logo.png"}),Object(c.jsx)(i.b,{to:"/account",className:"header-link",children:"Feed"}),t?Object(c.jsx)("a",{onClick:n,className:"header-link",children:"Logout"}):Object(c.jsx)("a",{onClick:e,className:"header-link",children:"Login"})]})},u=(n(450),function(){return Object(c.jsxs)("div",{class:"main",children:[Object(c.jsx)("h1",{class:"main-title",children:"Meet The Truth"}),Object(c.jsx)("p",{class:"main-subtitle",children:"Boosting decentralized discussions through NFT incentives"}),Object(c.jsxs)("div",{class:"main-images",children:[Object(c.jsx)("img",{src:"https://static01.nyt.com/images/2021/03/12/arts/11nft-auction-cryptopunks-print/11nft-auction-cryptopunks-print-mobileMasterAt3x.jpg"}),Object(c.jsx)("img",{src:"https://www.reuters.com/resizer/KPyPEIt3l_uuN0830xaFD9v2Idc=/1920x2400/smart/filters:quality(80)/cloudfront-us-east-2.images.arcpublishing.com/reuters/34GWN2I7W5LJJDYR7VOOLE7MLY.jpg"}),Object(c.jsx)("img",{src:"https://miro.medium.com/max/1200/1*5AyYzOlGlv501PlJlIdZZQ.jpeg"}),Object(c.jsx)("img",{src:"https://lh3.googleusercontent.com/I-9GNJlJwFt13PsqoF2G2r6d0OkvUF1E4k_Wr6IvX31bbVYPAN3-iIn8AFjVu7vvlnrG8ojWP75hg0S4U9SpEKNAm34PwNiQppH4=w600"})]})]})}),p=function(f){var e=f.user;return Object(c.jsxs)("div",{className:"App",children:[Object(c.jsx)(l,{user:e}),Object(c.jsx)(u,{})]})},m=(n(451),function(f){var e=f.active,n=f.text,t=f.onclick;return Object(c.jsx)("div",{onClick:t,className:"sidebar-item ".concat(e?"active-item":null),children:Object(c.jsx)("p",{children:n})})}),y=(n(452),function(f){var e=f.children;return Object(c.jsx)("div",{className:"sidebar-container",children:e})}),v=n(61),h=n(42),g=n(2),w=n.n(g),I=n(430),k=n(256),C=n(425),x=(n(454),n(455),n(98)),O=function(){var f=Object(x.b)(),e=f.getVideos,n=f.loading,a=f.videos,r=f.contract,s=f.readOnlyContract,i=f.uploadVideo,b=Object(t.useState)(!1),d=Object(o.a)(b,2),l=d[0],u=d[1],p=Object(t.useState)(localStorage.getItem("retweet")),m=Object(o.a)(p,2),y=m[0],g=m[1],O=Object(t.useState)([]),T=Object(o.a)(O,2),_=T[0],R=T[1];return Object(t.useEffect)((function(){n||a.forEach((function(f){R((function(e){return new Set([].concat(Object(h.a)(e),[{id:f.id,hash:f.hash,title:f.title,issue:f.issue,likes:parseInt(f.likes._hex,16),author:f.author}]))}))}))}),[a]),Object(t.useEffect)(Object(v.a)(w.a.mark((function f(){return w.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:if(!s||n){f.next=3;break}return f.next=3,e();case 3:case"end":return f.stop()}}),f)}))),[s]),Object(c.jsx)("div",{class:"feed",children:0!==a.length?a.map((function(f,e){return Object(c.jsx)(c.Fragment,{children:""!==f.issue?Object(c.jsxs)("div",{className:"feed-video",children:[Object(c.jsx)(I.a,{width:"600px",url:"https://ipfs.infura.io/ipfs/".concat(f.hash)}),Object(c.jsx)("p",{className:"discussion-issue",children:f.title}),Object(c.jsxs)("div",{className:"video-actions",children:[Object(c.jsxs)("div",{className:"video-like",children:[l?Object(c.jsx)(k.a,{className:"like-icon",size:30,onClick:function(){u((function(f){return!f}))}}):Object(c.jsx)(k.b,{className:"like-icon",size:30,onClick:function(){u((function(f){return!f})),r.likeVideo(f.id,f.likes).then((function(){R((function(e){var n=[].concat(Object(h.a)(e),[{id:f.id,hash:f.hash,title:f.title,issue:f.issue,author:f.author,likes:parseInt(f.likes._hex,16)+1}]);return Object(h.a)(new Set(n))})),setTimeout((function(){return window.location.reload()}),2e3)}))}}),Object(c.jsx)("p",{children:_.length===a.length?_[e].likes:parseInt(f.likes._hex,16)})]}),Object(c.jsx)("div",{className:"video-like",children:Object(c.jsx)(C.a,{color:y?"green":null,className:"like-icon",size:30,onClick:function(){g((function(f){return!f})),localStorage.setItem("retweeted",y),i(f.hash,f.title,f.issue).then((function(){window.location.reload()}))}})})]})]}):null})})):n?Object(c.jsx)("h2",{className:"feed-error",children:"Loading..."}):Object(c.jsx)("h2",{className:"feed-error",children:"No videos found!"})})},T=function(){return Object(c.jsx)("div",{})},_=n(47),R=n(429),j=(n(457),n(190)),E=(n(296),n(297).create({host:"ipfs.infura.io",port:5001,protocol:"https"}));_.e.register(_.d,_.i,_.b,_.n,_.o,_.g);var A={responsive:!0,plugins:{legend:{position:"top"},title:{display:!1}}},S=function(){var f=Object(x.b)(),e=f.getVideos,n=f.videos,a=f.nft,r=f.readOnlyContract,s=f.loading,i=Object(d.b)().address,u=Object(t.useState)(3),p=Object(o.a)(u,2),h=p[0],g=p[1],I=Object(t.useState)(null),k=Object(o.a)(I,2),C=k[0],O=k[1];Object(b.f)();Object(t.useEffect)((function(){if(!s){var f={labels:n.filter((function(f){return f.author===i})).map((function(f){return f.title})),datasets:[{label:"Likes",data:n.filter((function(f){return f.author===i})).map((function(f){return parseInt(f.likes._hex,16)})),backgroundColor:"rgba(255, 99, 132, 0.5)"}]};O(f)}}),[n]),Object(t.useEffect)(Object(v.a)(w.a.mark((function f(){return w.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:if(!r||s){f.next=3;break}return f.next=3,e();case 3:case"end":return f.stop()}}),f)}))),[r]);var T=function(){var f=Object(v.a)(w.a.mark((function f(e){var n,t,r;return w.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:return n="https://ipfs.infura.io/ipfs/",t={name:e.title,description:e.issue,image:n+e.hash},f.next=4,E.add(JSON.stringify(t));case 4:r=f.sent,a.mint(i,n+r.path).then((function(){alert("Successfully minted NFT")}));case 6:case"end":return f.stop()}}),f)})));return function(e){return f.apply(this,arguments)}}();return Object(c.jsxs)(j.a,{style:{height:"100vh",width:"100vw"},forceVisible:"y",autoHide:!1,children:[Object(c.jsx)(l,{}),Object(c.jsxs)("div",{className:"account",children:[Object(c.jsxs)(y,{children:[Object(c.jsx)(m,{active:0===h,text:"For you",onclick:function(){window.location.replace("/account")}}),Object(c.jsx)(m,{active:1===h,text:"Following",onclick:function(){return g(1)}}),Object(c.jsx)(m,{active:2===h,text:"Create",onclick:function(){return g(2)}}),Object(c.jsx)(m,{active:3===h,text:"Stats",onclick:function(){g(3)}}),Object(c.jsx)(m,{active:4===h,text:"Profile",onclick:function(){return g(4)}})]}),Object(c.jsxs)("div",{classname:"stats",children:[Object(c.jsx)("div",{className:"stats-graph",children:C?Object(c.jsx)(R.a,{options:A,data:C}):null}),Object(c.jsx)("h2",{style:{marginTop:50},children:"Mint NFT from Video"}),Object(c.jsxs)("div",{className:"mint-nft",children:[s&&Object(c.jsx)("p",{children:"Loading..."}),n.map((function(f){return Object(c.jsx)(c.Fragment,{children:f.author===i?Object(c.jsxs)("div",{className:"video-nft",children:[Object(c.jsx)("p",{children:f.title}),Object(c.jsx)("button",{onClick:function(){f.likes>=5&&T(f)},className:"mint-btn ".concat(f.likes<5?"disabled":null),children:"Mint NFT"})]}):null})}))]})]})]})]})},M=n(427),F=n.n(M),N=(n(738),function(){var f=Object(d.b)().address;return Object(c.jsxs)("div",{className:"profile",children:[Object(c.jsx)(F.a,{email:f,className:"profile-avatar"}),Object(c.jsx)("h2",{children:f})]})}),q=n(428),z=(n(742),function(f){f.data;var e=Object(t.useState)(0),n=Object(o.a)(e,2),a=n[0],r=n[1];Object(b.f)();return Object(c.jsxs)(j.a,{style:{height:"100vh",width:"100vw"},forceVisible:"y",autoHide:!1,children:[Object(c.jsx)(l,{}),Object(c.jsxs)("div",{className:"account",children:[Object(c.jsxs)(y,{children:[Object(c.jsx)(m,{active:0===a,text:"For you",onclick:function(){window.location.reload(),r(0)}}),Object(c.jsx)(m,{active:1===a,text:"Following",onclick:function(){return r(1)}}),Object(c.jsx)(m,{active:2===a,text:"Create",onclick:function(){return r(2)}}),Object(c.jsx)(m,{active:3===a,text:"Stats",onclick:function(){return window.location.replace("/stats")}}),Object(c.jsx)(m,{active:4===a,text:"Profile",onclick:function(){return r(4)}})]}),Object(c.jsx)("div",{style:{flex:1},children:0===a?Object(c.jsx)(O,{}):1===a?Object(c.jsx)(T,{}):2===a?Object(c.jsx)(q.a,{}):3===a?Object(c.jsx)(S,{}):Object(c.jsx)(N,{})})]})]})});n(743),n(998),n(999),n(1e3);var U=function(){var f=Object(t.useState)([]),e=Object(o.a)(f,2),n=(e[0],e[1],Object(t.useState)("0x0")),a=Object(o.a)(n,2);return a[0],a[1],Object(c.jsx)(i.a,{children:Object(c.jsxs)(b.c,{children:[Object(c.jsx)(b.a,{path:"/",element:Object(c.jsx)(p,{})}),Object(c.jsx)(b.a,{path:"/account",element:Object(c.jsx)(z,{})}),Object(c.jsx)(b.a,{path:"/stats",element:Object(c.jsx)(S,{})})]})})};s.a.render(Object(c.jsx)(a.a.StrictMode,{children:Object(c.jsx)(d.a,{children:Object(c.jsx)(x.a,{children:Object(c.jsx)(U,{})})})}),document.getElementById("root"))},254:function(f){f.exports=JSON.parse('{"address":"0x3812708023198B0d8C89125508293F16deB43DbD","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"string","name":"hash","type":"string"},{"indexed":false,"internalType":"string","name":"title","type":"string"},{"indexed":false,"internalType":"string","name":"issue","type":"string"},{"indexed":false,"internalType":"int256","name":"likes","type":"int256"},{"indexed":false,"internalType":"address","name":"author","type":"address"}],"name":"VideoUploaded","type":"event"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"int256","name":"_likes","type":"int256"}],"name":"likeVideo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalVideos","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_videoHash","type":"string"},{"internalType":"string","name":"_title","type":"string"},{"internalType":"string","name":"_issue","type":"string"}],"name":"uploadVideo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"videoCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"videos","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"hash","type":"string"},{"internalType":"string","name":"title","type":"string"},{"internalType":"string","name":"issue","type":"string"},{"internalType":"int256","name":"likes","type":"int256"},{"internalType":"address","name":"author","type":"address"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x5e6536f05c91f49f7a3e5a7b1e235b785df9ef426a38780508a1da9e2d92984e","receipt":{"to":null,"from":"0x8EBf401fD4d0D704dd84c4321cf9d8b805671fd1","contractAddress":"0x3812708023198B0d8C89125508293F16deB43DbD","transactionIndex":0,"gasUsed":"5962118","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x70c18ef7e6d39386fde3d5ad5a618a960d3eeeca7485afb1e4d588fb67fa948a","transactionHash":"0x5e6536f05c91f49f7a3e5a7b1e235b785df9ef426a38780508a1da9e2d92984e","logs":[],"blockNumber":65229,"cumulativeGasUsed":"5962118","status":1,"byzantium":true},"args":[],"numDeployments":1,"solcInputHash":"6573325a8bf99438ce8ddf2fcae58166","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.0+commit.c7dfd78e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"hash\\",\\"type\\":\\"string\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"title\\",\\"type\\":\\"string\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"issue\\",\\"type\\":\\"string\\"},{\\"indexed\\":false,\\"internalType\\":\\"int256\\",\\"name\\":\\"likes\\",\\"type\\":\\"int256\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"author\\",\\"type\\":\\"address\\"}],\\"name\\":\\"VideoUploaded\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"int256\\",\\"name\\":\\"_likes\\",\\"type\\":\\"int256\\"}],\\"name\\":\\"likeVideo\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalVideos\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"_videoHash\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_title\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_issue\\",\\"type\\":\\"string\\"}],\\"name\\":\\"uploadVideo\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"videoCount\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"videos\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"hash\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"title\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"issue\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"int256\\",\\"name\\":\\"likes\\",\\"type\\":\\"int256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"author\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/Contract.sol\\":\\"Contract\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":false,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"contracts/Contract.sol\\":{\\"content\\":\\"pragma solidity ^0.8.0;\\\\n\\\\ncontract Contract {\\\\n  uint public videoCount = 0;\\\\n  string public name = \\\\\\"Contract\\\\\\";\\\\n  mapping(uint => Video) public videos;\\\\n\\\\n  struct Video {\\\\n    uint id;\\\\n    string hash;\\\\n    string title;\\\\n    string issue;\\\\n    int likes;\\\\n    address author;\\\\n  }\\\\n\\\\n  event VideoUploaded(\\\\n    uint id,\\\\n    string hash,\\\\n    string title,\\\\n    string issue,\\\\n    int likes,\\\\n    address author\\\\n  );\\\\n\\\\n  constructor() public {\\\\n\\\\n  }\\\\n\\\\n  function uploadVideo(string memory _videoHash, string memory _title, string memory _issue) public {\\\\n    require(bytes(_videoHash).length > 0);\\\\n    require(bytes(_title).length > 0);\\\\n    require(bytes(_issue).length > 0);\\\\n    videoCount++;\\\\n    videos[videoCount] = Video(videoCount, _videoHash, _title, _issue, 0, msg.sender);\\\\n    emit VideoUploaded(videoCount, _videoHash, _title, _issue, 0, msg.sender);\\\\n  }\\\\n\\\\n  function likeVideo(uint id, int _likes) public {\\\\n    videos[id].likes = _likes + 1;\\\\n  }\\\\n\\\\n  function totalVideos() public returns(uint256) {\\\\n    return videoCount;\\\\n  }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x97e8c9879231c655cea8e7fb3fcbf5db2ee2e309d81a857ae1628acec2d209d6\\"}},\\"version\\":1}","bytecode":"0x6080604052600080556040518060400160405280600881526020017f436f6e747261637400000000000000000000000000000000000000000000000081525060019080519060200190620000559291906200006a565b503480156200006357600080fd5b506200017f565b82805462000078906200011a565b90600052602060002090601f0160209004810192826200009c5760008555620000e8565b82601f10620000b757805160ff1916838001178555620000e8565b82800160010185558215620000e8579182015b82811115620000e7578251825591602001919060010190620000ca565b5b509050620000f79190620000fb565b5090565b5b8082111562000116576000816000905550600101620000fc565b5090565b600060028204905060018216806200013357607f821691505b602082108114156200014a576200014962000150565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610c7a806200018f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde03146100675780634875e9fd14610085578063c61b5f4c146100a1578063e230a208146100bf578063e6821bf5146100dd578063ebc7d5e114610112575b600080fd5b61006f61012e565b60405161007c9190610829565b60405180910390f35b61009f600480360381019061009a91906106b8565b6101bc565b005b6100a9610355565b6040516100b6919061084b565b60405180910390f35b6100c761035b565b6040516100d4919061084b565b60405180910390f35b6100f760048036038101906100f2919061074f565b610364565b60405161010996959493929190610866565b60405180910390f35b61012c60048036038101906101279190610778565b610558565b005b6001805461013b90610afd565b80601f016020809104026020016040519081016040528092919081815260200182805461016790610afd565b80156101b45780601f10610189576101008083540402835291602001916101b4565b820191906000526020600020905b81548152906001019060200180831161019757829003601f168201915b505050505081565b60008351116101ca57600080fd5b60008251116101d857600080fd5b60008151116101e657600080fd5b6000808154809291906101f890610b2f565b91905055506040518060c001604052806000548152602001848152602001838152602001828152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff16815250600260008054815260200190815260200160002060008201518160000155602082015181600101908051906020019061027d929190610583565b50604082015181600201908051906020019061029a929190610583565b5060608201518160030190805190602001906102b7929190610583565b506080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fbd220a36eabb33bf9f4da64559323f45aa9a9d3e85f8c14f7a5403ec42bc9103600054848484600033604051610348969594939291906108dc565b60405180910390a1505050565b60005481565b60008054905090565b600260205280600052604060002060009150905080600001549080600101805461038d90610afd565b80601f01602080910402602001604051908101604052809291908181526020018280546103b990610afd565b80156104065780601f106103db57610100808354040283529160200191610406565b820191906000526020600020905b8154815290600101906020018083116103e957829003601f168201915b50505050509080600201805461041b90610afd565b80601f016020809104026020016040519081016040528092919081815260200182805461044790610afd565b80156104945780601f1061046957610100808354040283529160200191610494565b820191906000526020600020905b81548152906001019060200180831161047757829003601f168201915b5050505050908060030180546104a990610afd565b80601f01602080910402602001604051908101604052809291908181526020018280546104d590610afd565b80156105225780601f106104f757610100808354040283529160200191610522565b820191906000526020600020905b81548152906001019060200180831161050557829003601f168201915b5050505050908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b60018161056591906109cf565b60026000848152602001908152602001600020600401819055505050565b82805461058f90610afd565b90600052602060002090601f0160209004810192826105b157600085556105f8565b82601f106105ca57805160ff19168380011785556105f8565b828001600101855582156105f8579182015b828111156105f75782518255916020019190600101906105dc565b5b5090506106059190610609565b5090565b5b8082111561062257600081600090555060010161060a565b5090565b600061063961063484610983565b610952565b90508281526020810184848401111561065157600080fd5b61065c848285610abb565b509392505050565b60008135905061067381610c16565b92915050565b600082601f83011261068a57600080fd5b813561069a848260208601610626565b91505092915050565b6000813590506106b281610c2d565b92915050565b6000806000606084860312156106cd57600080fd5b600084013567ffffffffffffffff8111156106e757600080fd5b6106f386828701610679565b935050602084013567ffffffffffffffff81111561071057600080fd5b61071c86828701610679565b925050604084013567ffffffffffffffff81111561073957600080fd5b61074586828701610679565b9150509250925092565b60006020828403121561076157600080fd5b600061076f848285016106a3565b91505092915050565b6000806040838503121561078b57600080fd5b6000610799858286016106a3565b92505060206107aa85828601610664565b9150509250929050565b6107bd81610a63565b82525050565b6107cc81610a75565b82525050565b6107db81610aa9565b82525050565b60006107ec826109b3565b6107f681856109be565b9350610806818560208601610aca565b61080f81610c05565b840191505092915050565b61082381610a9f565b82525050565b6000602082019050818103600083015261084381846107e1565b905092915050565b6000602082019050610860600083018461081a565b92915050565b600060c08201905061087b600083018961081a565b818103602083015261088d81886107e1565b905081810360408301526108a181876107e1565b905081810360608301526108b581866107e1565b90506108c460808301856107c3565b6108d160a08301846107b4565b979650505050505050565b600060c0820190506108f1600083018961081a565b818103602083015261090381886107e1565b9050818103604083015261091781876107e1565b9050818103606083015261092b81866107e1565b905061093a60808301856107d2565b61094760a08301846107b4565b979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561097957610978610bd6565b5b8060405250919050565b600067ffffffffffffffff82111561099e5761099d610bd6565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006109da82610a75565b91506109e583610a75565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610a2057610a1f610b78565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610a5857610a57610b78565b5b828201905092915050565b6000610a6e82610a7f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ab482610a75565b9050919050565b82818337600083830152505050565b60005b83811015610ae8578082015181840152602081019050610acd565b83811115610af7576000848401525b50505050565b60006002820490506001821680610b1557607f821691505b60208210811415610b2957610b28610ba7565b5b50919050565b6000610b3a82610a9f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b6d57610b6c610b78565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610c1f81610a75565b8114610c2a57600080fd5b50565b610c3681610a9f565b8114610c4157600080fd5b5056fea264697066735822122075d8b7c86309a3a005bbfdcc17c071618502d96aef0eca4b7d83aa6aa45fe02664736f6c63430008000033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde03146100675780634875e9fd14610085578063c61b5f4c146100a1578063e230a208146100bf578063e6821bf5146100dd578063ebc7d5e114610112575b600080fd5b61006f61012e565b60405161007c9190610829565b60405180910390f35b61009f600480360381019061009a91906106b8565b6101bc565b005b6100a9610355565b6040516100b6919061084b565b60405180910390f35b6100c761035b565b6040516100d4919061084b565b60405180910390f35b6100f760048036038101906100f2919061074f565b610364565b60405161010996959493929190610866565b60405180910390f35b61012c60048036038101906101279190610778565b610558565b005b6001805461013b90610afd565b80601f016020809104026020016040519081016040528092919081815260200182805461016790610afd565b80156101b45780601f10610189576101008083540402835291602001916101b4565b820191906000526020600020905b81548152906001019060200180831161019757829003601f168201915b505050505081565b60008351116101ca57600080fd5b60008251116101d857600080fd5b60008151116101e657600080fd5b6000808154809291906101f890610b2f565b91905055506040518060c001604052806000548152602001848152602001838152602001828152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff16815250600260008054815260200190815260200160002060008201518160000155602082015181600101908051906020019061027d929190610583565b50604082015181600201908051906020019061029a929190610583565b5060608201518160030190805190602001906102b7929190610583565b506080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fbd220a36eabb33bf9f4da64559323f45aa9a9d3e85f8c14f7a5403ec42bc9103600054848484600033604051610348969594939291906108dc565b60405180910390a1505050565b60005481565b60008054905090565b600260205280600052604060002060009150905080600001549080600101805461038d90610afd565b80601f01602080910402602001604051908101604052809291908181526020018280546103b990610afd565b80156104065780601f106103db57610100808354040283529160200191610406565b820191906000526020600020905b8154815290600101906020018083116103e957829003601f168201915b50505050509080600201805461041b90610afd565b80601f016020809104026020016040519081016040528092919081815260200182805461044790610afd565b80156104945780601f1061046957610100808354040283529160200191610494565b820191906000526020600020905b81548152906001019060200180831161047757829003601f168201915b5050505050908060030180546104a990610afd565b80601f01602080910402602001604051908101604052809291908181526020018280546104d590610afd565b80156105225780601f106104f757610100808354040283529160200191610522565b820191906000526020600020905b81548152906001019060200180831161050557829003601f168201915b5050505050908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b60018161056591906109cf565b60026000848152602001908152602001600020600401819055505050565b82805461058f90610afd565b90600052602060002090601f0160209004810192826105b157600085556105f8565b82601f106105ca57805160ff19168380011785556105f8565b828001600101855582156105f8579182015b828111156105f75782518255916020019190600101906105dc565b5b5090506106059190610609565b5090565b5b8082111561062257600081600090555060010161060a565b5090565b600061063961063484610983565b610952565b90508281526020810184848401111561065157600080fd5b61065c848285610abb565b509392505050565b60008135905061067381610c16565b92915050565b600082601f83011261068a57600080fd5b813561069a848260208601610626565b91505092915050565b6000813590506106b281610c2d565b92915050565b6000806000606084860312156106cd57600080fd5b600084013567ffffffffffffffff8111156106e757600080fd5b6106f386828701610679565b935050602084013567ffffffffffffffff81111561071057600080fd5b61071c86828701610679565b925050604084013567ffffffffffffffff81111561073957600080fd5b61074586828701610679565b9150509250925092565b60006020828403121561076157600080fd5b600061076f848285016106a3565b91505092915050565b6000806040838503121561078b57600080fd5b6000610799858286016106a3565b92505060206107aa85828601610664565b9150509250929050565b6107bd81610a63565b82525050565b6107cc81610a75565b82525050565b6107db81610aa9565b82525050565b60006107ec826109b3565b6107f681856109be565b9350610806818560208601610aca565b61080f81610c05565b840191505092915050565b61082381610a9f565b82525050565b6000602082019050818103600083015261084381846107e1565b905092915050565b6000602082019050610860600083018461081a565b92915050565b600060c08201905061087b600083018961081a565b818103602083015261088d81886107e1565b905081810360408301526108a181876107e1565b905081810360608301526108b581866107e1565b90506108c460808301856107c3565b6108d160a08301846107b4565b979650505050505050565b600060c0820190506108f1600083018961081a565b818103602083015261090381886107e1565b9050818103604083015261091781876107e1565b9050818103606083015261092b81866107e1565b905061093a60808301856107d2565b61094760a08301846107b4565b979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561097957610978610bd6565b5b8060405250919050565b600067ffffffffffffffff82111561099e5761099d610bd6565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006109da82610a75565b91506109e583610a75565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610a2057610a1f610b78565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610a5857610a57610b78565b5b828201905092915050565b6000610a6e82610a7f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ab482610a75565b9050919050565b82818337600083830152505050565b60005b83811015610ae8578082015181840152602081019050610acd565b83811115610af7576000848401525b50505050565b60006002820490506001821680610b1557607f821691505b60208210811415610b2957610b28610ba7565b5b50919050565b6000610b3a82610a9f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b6d57610b6c610b78565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610c1f81610a75565b8114610c2a57600080fd5b50565b610c3681610a9f565b8114610c4157600080fd5b5056fea264697066735822122075d8b7c86309a3a005bbfdcc17c071618502d96aef0eca4b7d83aa6aa45fe02664736f6c63430008000033","devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":1733,"contract":"contracts/Contract.sol:Contract","label":"videoCount","offset":0,"slot":"0","type":"t_uint256"},{"astId":1736,"contract":"contracts/Contract.sol:Contract","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1741,"contract":"contracts/Contract.sol:Contract","label":"videos","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_struct(Video)1754_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_int256":{"encoding":"inplace","label":"int256","numberOfBytes":"32"},"t_mapping(t_uint256,t_struct(Video)1754_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct Contract.Video)","numberOfBytes":"32","value":"t_struct(Video)1754_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Video)1754_storage":{"encoding":"inplace","label":"struct Contract.Video","members":[{"astId":1743,"contract":"contracts/Contract.sol:Contract","label":"id","offset":0,"slot":"0","type":"t_uint256"},{"astId":1745,"contract":"contracts/Contract.sol:Contract","label":"hash","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1747,"contract":"contracts/Contract.sol:Contract","label":"title","offset":0,"slot":"2","type":"t_string_storage"},{"astId":1749,"contract":"contracts/Contract.sol:Contract","label":"issue","offset":0,"slot":"3","type":"t_string_storage"},{"astId":1751,"contract":"contracts/Contract.sol:Contract","label":"likes","offset":0,"slot":"4","type":"t_int256"},{"astId":1753,"contract":"contracts/Contract.sol:Contract","label":"author","offset":0,"slot":"5","type":"t_address"}],"numberOfBytes":"192"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},255:function(f){f.exports=JSON.parse('{"address":"0xF653D6180cD7CeaB3E8142370E29cf4A8E336925","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllTokens","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"uri","type":"string"}],"internalType":"struct NFT.RenderToken[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"string","name":"uri","type":"string"}],"name":"mint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xdb0da8773dd0ab5546a1e03b0734f1c793279df30b1ebcd97423a66fc8ad1169","receipt":{"to":null,"from":"0x8EBf401fD4d0D704dd84c4321cf9d8b805671fd1","contractAddress":"0xF653D6180cD7CeaB3E8142370E29cf4A8E336925","transactionIndex":0,"gasUsed":"18400561","logsBloom":"0xblockHash":"0xb4e908cba3c712c6dd07da6807bd8d4bea6b3ff644e65c13a4a2f9330fff4f7a","transactionHash":"0xdb0da8773dd0ab5546a1e03b0734f1c793279df30b1ebcd97423a66fc8ad1169","logs":[{"transactionIndex":0,"blockNumber":65230,"transactionHash":"0xdb0da8773dd0ab5546a1e03b0734f1c793279df30b1ebcd97423a66fc8ad1169","address":"0xF653D6180cD7CeaB3E8142370E29cf4A8E336925","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000008ebf401fd4d0d704dd84c4321cf9d8b805671fd1"],"data":"0x","logIndex":0,"blockHash":"0xb4e908cba3c712c6dd07da6807bd8d4bea6b3ff644e65c13a4a2f9330fff4f7a"}],"blockNumber":65230,"cumulativeGasUsed":"18400561","status":1,"byzantium":true},"args":[],"numDeployments":1,"solcInputHash":"6573325a8bf99438ce8ddf2fcae58166","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.0+commit.c7dfd78e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"approved\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ApprovalForAll\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getAllTokens\\",\\"outputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"uri\\",\\"type\\":\\"string\\"}],\\"internalType\\":\\"struct NFT.RenderToken[]\\",\\"name\\":\\"\\",\\"type\\":\\"tuple[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"getApproved\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedForAll\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"uri\\",\\"type\\":\\"string\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"ownerOf\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setApprovalForAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceId\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"supportsInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"tokenURI\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC721-approve}.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC721-balanceOf}.\\"},\\"getApproved(uint256)\\":{\\"details\\":\\"See {IERC721-getApproved}.\\"},\\"isApprovedForAll(address,address)\\":{\\"details\\":\\"See {IERC721-isApprovedForAll}.\\"},\\"name()\\":{\\"details\\":\\"See {IERC721Metadata-name}.\\"},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"ownerOf(uint256)\\":{\\"details\\":\\"See {IERC721-ownerOf}.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"safeTransferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC721-safeTransferFrom}.\\"},\\"safeTransferFrom(address,address,uint256,bytes)\\":{\\"details\\":\\"See {IERC721-safeTransferFrom}.\\"},\\"setApprovalForAll(address,bool)\\":{\\"details\\":\\"See {IERC721-setApprovalForAll}.\\"},\\"supportsInterface(bytes4)\\":{\\"details\\":\\"See {IERC165-supportsInterface}.\\"},\\"symbol()\\":{\\"details\\":\\"See {IERC721Metadata-symbol}.\\"},\\"tokenURI(uint256)\\":{\\"details\\":\\"See {IERC721Metadata-tokenURI}.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC721-transferFrom}.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/NFT.sol\\":\\"NFT\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":false,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC721.sol\\\\\\";\\\\nimport \\\\\\"./IERC721Receiver.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC721Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Address.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Strings.sol\\\\\\";\\\\nimport \\\\\\"../../utils/introspection/ERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\\\n * {ERC721Enumerable}.\\\\n */\\\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\\\n    using Address for address;\\\\n    using Strings for uint256;\\\\n\\\\n    // Token name\\\\n    string private _name;\\\\n\\\\n    // Token symbol\\\\n    string private _symbol;\\\\n\\\\n    // Mapping from token ID to owner address\\\\n    mapping(uint256 => address) private _owners;\\\\n\\\\n    // Mapping owner address to token count\\\\n    mapping(address => uint256) private _balances;\\\\n\\\\n    // Mapping from token ID to approved address\\\\n    mapping(uint256 => address) private _tokenApprovals;\\\\n\\\\n    // Mapping from owner to operator approvals\\\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\\\n     */\\\\n    constructor(string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\\\n        return\\\\n            interfaceId == type(IERC721).interfaceId ||\\\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\\\n            super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-balanceOf}.\\\\n     */\\\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\\\n        require(owner != address(0), \\\\\\"ERC721: balance query for the zero address\\\\\\");\\\\n        return _balances[owner];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-ownerOf}.\\\\n     */\\\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\\\n        address owner = _owners[tokenId];\\\\n        require(owner != address(0), \\\\\\"ERC721: owner query for nonexistent token\\\\\\");\\\\n        return owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-name}.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-symbol}.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721Metadata-tokenURI}.\\\\n     */\\\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\\\n        require(_exists(tokenId), \\\\\\"ERC721Metadata: URI query for nonexistent token\\\\\\");\\\\n\\\\n        string memory baseURI = _baseURI();\\\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\\\\"\\\\\\";\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\\\n     * by default, can be overriden in child contracts.\\\\n     */\\\\n    function _baseURI() internal view virtual returns (string memory) {\\\\n        return \\\\\\"\\\\\\";\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-approve}.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) public virtual override {\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n        require(to != owner, \\\\\\"ERC721: approval to current owner\\\\\\");\\\\n\\\\n        require(\\\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\\\n            \\\\\\"ERC721: approve caller is not owner nor approved for all\\\\\\"\\\\n        );\\\\n\\\\n        _approve(to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-getApproved}.\\\\n     */\\\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\\\n        require(_exists(tokenId), \\\\\\"ERC721: approved query for nonexistent token\\\\\\");\\\\n\\\\n        return _tokenApprovals[tokenId];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-setApprovalForAll}.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\\\n        _setApprovalForAll(_msgSender(), operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-isApprovedForAll}.\\\\n     */\\\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\\\n        return _operatorApprovals[owner][operator];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-transferFrom}.\\\\n     */\\\\n    function transferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) public virtual override {\\\\n        //solhint-disable-next-line max-line-length\\\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\\\\"ERC721: transfer caller is not owner nor approved\\\\\\");\\\\n\\\\n        _transfer(from, to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) public virtual override {\\\\n        safeTransferFrom(from, to, tokenId, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory _data\\\\n    ) public virtual override {\\\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\\\\"ERC721: transfer caller is not owner nor approved\\\\\\");\\\\n        _safeTransfer(from, to, tokenId, _data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\\\n     *\\\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\\\n     *\\\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _safeTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory _data\\\\n    ) internal virtual {\\\\n        _transfer(from, to, tokenId);\\\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns whether `tokenId` exists.\\\\n     *\\\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\\\n     *\\\\n     * Tokens start existing when they are minted (`_mint`),\\\\n     * and stop existing when they are burned (`_burn`).\\\\n     */\\\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\\\n        return _owners[tokenId] != address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\\\n        require(_exists(tokenId), \\\\\\"ERC721: operator query for nonexistent token\\\\\\");\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must not exist.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\\\n        _safeMint(to, tokenId, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\\\n     */\\\\n    function _safeMint(\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory _data\\\\n    ) internal virtual {\\\\n        _mint(to, tokenId);\\\\n        require(\\\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\\\n            \\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Mints `tokenId` and transfers it to `to`.\\\\n     *\\\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must not exist.\\\\n     * - `to` cannot be the zero address.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _mint(address to, uint256 tokenId) internal virtual {\\\\n        require(to != address(0), \\\\\\"ERC721: mint to the zero address\\\\\\");\\\\n        require(!_exists(tokenId), \\\\\\"ERC721: token already minted\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), to, tokenId);\\\\n\\\\n        _balances[to] += 1;\\\\n        _owners[tokenId] = to;\\\\n\\\\n        emit Transfer(address(0), to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `tokenId`.\\\\n     * The approval is cleared when the token is burned.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _burn(uint256 tokenId) internal virtual {\\\\n        address owner = ERC721.ownerOf(tokenId);\\\\n\\\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\\\n\\\\n        // Clear approvals\\\\n        _approve(address(0), tokenId);\\\\n\\\\n        _balances[owner] -= 1;\\\\n        delete _owners[tokenId];\\\\n\\\\n        emit Transfer(owner, address(0), tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers `tokenId` from `from` to `to`.\\\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must be owned by `from`.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function _transfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) internal virtual {\\\\n        require(ERC721.ownerOf(tokenId) == from, \\\\\\"ERC721: transfer of token that is not own\\\\\\");\\\\n        require(to != address(0), \\\\\\"ERC721: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(from, to, tokenId);\\\\n\\\\n        // Clear approvals from the previous owner\\\\n        _approve(address(0), tokenId);\\\\n\\\\n        _balances[from] -= 1;\\\\n        _balances[to] += 1;\\\\n        _owners[tokenId] = to;\\\\n\\\\n        emit Transfer(from, to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Approve `to` to operate on `tokenId`\\\\n     *\\\\n     * Emits a {Approval} event.\\\\n     */\\\\n    function _approve(address to, uint256 tokenId) internal virtual {\\\\n        _tokenApprovals[tokenId] = to;\\\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\\\n     *\\\\n     * Emits a {ApprovalForAll} event.\\\\n     */\\\\n    function _setApprovalForAll(\\\\n        address owner,\\\\n        address operator,\\\\n        bool approved\\\\n    ) internal virtual {\\\\n        require(owner != operator, \\\\\\"ERC721: approve to caller\\\\\\");\\\\n        _operatorApprovals[owner][operator] = approved;\\\\n        emit ApprovalForAll(owner, operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\\\n     * The call is not executed if the target address is not a contract.\\\\n     *\\\\n     * @param from address representing the previous owner of the given token ID\\\\n     * @param to target address that will receive the tokens\\\\n     * @param tokenId uint256 ID of the token to be transferred\\\\n     * @param _data bytes optional data to send along with the call\\\\n     * @return bool whether the call correctly returned the expected magic value\\\\n     */\\\\n    function _checkOnERC721Received(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes memory _data\\\\n    ) private returns (bool) {\\\\n        if (to.isContract()) {\\\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\\\n                return retval == IERC721Receiver.onERC721Received.selector;\\\\n            } catch (bytes memory reason) {\\\\n                if (reason.length == 0) {\\\\n                    revert(\\\\\\"ERC721: transfer to non ERC721Receiver implementer\\\\\\");\\\\n                } else {\\\\n                    assembly {\\\\n                        revert(add(32, reason), mload(reason))\\\\n                    }\\\\n                }\\\\n            }\\\\n        } else {\\\\n            return true;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any token transfer. This includes minting\\\\n     * and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - When `from` and `to` are both non-zero, ``from``\'s `tokenId` will be\\\\n     * transferred to `to`.\\\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\\\n     * - When `to` is zero, ``from``\'s `tokenId` will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) internal virtual {}\\\\n}\\\\n\\",\\"keccak256\\":\\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC721 compliant contract.\\\\n */\\\\ninterface IERC721 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\\\n     */\\\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\\\n\\\\n    /**\\\\n     * @dev Returns the number of tokens in ``owner``\'s account.\\\\n     */\\\\n    function balanceOf(address owner) external view returns (uint256 balance);\\\\n\\\\n    /**\\\\n     * @dev Returns the owner of the `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\\\n     * The approval is cleared when the token is transferred.\\\\n     *\\\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The caller must own the token or be an approved operator.\\\\n     * - `tokenId` must exist.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) external;\\\\n\\\\n    /**\\\\n     * @dev Returns the account approved for `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\\\n\\\\n    /**\\\\n     * @dev Approve or remove `operator` as an operator for the caller.\\\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The `operator` cannot be the caller.\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool _approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\\\n     *\\\\n     * See {setApprovalForAll}\\\\n     */\\\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @title ERC721 token receiver interface\\\\n * @dev Interface for any contract that wants to support safeTransfers\\\\n * from ERC721 asset contracts.\\\\n */\\\\ninterface IERC721Receiver {\\\\n    /**\\\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\\\n     * by `operator` from `from`, this function is called.\\\\n     *\\\\n     * It must return its Solidity selector to confirm the token transfer.\\\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\\\n     *\\\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\\\n     */\\\\n    function onERC721Received(\\\\n        address operator,\\\\n        address from,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC721.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\\\n */\\\\ninterface IERC721Metadata is IERC721 {\\\\n    /**\\\\n     * @dev Returns the token collection name.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the token collection symbol.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\\\n     */\\\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Counters.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @title Counters\\\\n * @author Matt Condon (@shrugs)\\\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\\\n *\\\\n * Include with `using Counters for Counters.Counter;`\\\\n */\\\\nlibrary Counters {\\\\n    struct Counter {\\\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\\\n        // the library\'s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\\\n        uint256 _value; // default: 0\\\\n    }\\\\n\\\\n    function current(Counter storage counter) internal view returns (uint256) {\\\\n        return counter._value;\\\\n    }\\\\n\\\\n    function increment(Counter storage counter) internal {\\\\n        unchecked {\\\\n            counter._value += 1;\\\\n        }\\\\n    }\\\\n\\\\n    function decrement(Counter storage counter) internal {\\\\n        uint256 value = counter._value;\\\\n        require(value > 0, \\\\\\"Counter: decrement overflow\\\\\\");\\\\n        unchecked {\\\\n            counter._value = value - 1;\\\\n        }\\\\n    }\\\\n\\\\n    function reset(Counter storage counter) internal {\\\\n        counter._value = 0;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Strings.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev String operations.\\\\n */\\\\nlibrary Strings {\\\\n    bytes16 private constant _HEX_SYMBOLS = \\\\\\"0123456789abcdef\\\\\\";\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toString(uint256 value) internal pure returns (string memory) {\\\\n        // Inspired by OraclizeAPI\'s implementation - MIT licence\\\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\\\n\\\\n        if (value == 0) {\\\\n            return \\\\\\"0\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 digits;\\\\n        while (temp != 0) {\\\\n            digits++;\\\\n            temp /= 10;\\\\n        }\\\\n        bytes memory buffer = new bytes(digits);\\\\n        while (value != 0) {\\\\n            digits -= 1;\\\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\\\n            value /= 10;\\\\n        }\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\n     */\\\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\\\n        if (value == 0) {\\\\n            return \\\\\\"0x00\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 length = 0;\\\\n        while (temp != 0) {\\\\n            length++;\\\\n            temp >>= 8;\\\\n        }\\\\n        return toHexString(value, length);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\n     */\\\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\\\n        bytes memory buffer = new bytes(2 * length + 2);\\\\n        buffer[0] = \\\\\\"0\\\\\\";\\\\n        buffer[1] = \\\\\\"x\\\\\\";\\\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\\\n            value >>= 4;\\\\n        }\\\\n        require(value == 0, \\\\\\"Strings: hex length insufficient\\\\\\");\\\\n        return string(buffer);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n *\\\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\\",\\"license\\":\\"MIT\\"},\\"contracts/NFT.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Counters.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\ncontract NFT is ERC721, Ownable {\\\\n  using Counters for Counters.Counter;\\\\n  using Strings for uint256;\\\\n  Counters.Counter _tokenIds;\\\\n  mapping(uint256 => string) _tokenURIs;\\\\n\\\\n  struct RenderToken {\\\\n    uint256 id;\\\\n    string uri;\\\\n  }\\\\n\\\\n  constructor() ERC721(\\\\\\"WeNFT\\\\\\", \\\\\\"WNFT\\\\\\") {}\\\\n\\\\n  function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\\\\n    _tokenURIs[tokenId] = _tokenURI;\\\\n  }\\\\n\\\\n  function tokenURI(uint256 tokenId)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override\\\\n    returns (string memory)\\\\n  {\\\\n    require(_exists(tokenId));\\\\n    string memory _tokenURI = _tokenURIs[tokenId];\\\\n    return _tokenURI;\\\\n  }\\\\n\\\\n  function getAllTokens() public view returns (RenderToken[] memory) {\\\\n    uint256 lastestId = _tokenIds.current();\\\\n    uint256 counter = 0;\\\\n    RenderToken[] memory res = new RenderToken[](lastestId);\\\\n    for (uint256 i = 0; i < lastestId; i++) {\\\\n      if (_exists(counter)) {\\\\n        string memory uri = tokenURI(counter);\\\\n        res[counter] = RenderToken(counter, uri);\\\\n      }\\\\n      counter++;\\\\n    }\\\\n    return res;\\\\n  }\\\\n\\\\n  function mint(address recipient, string memory uri) public returns (uint256) {\\\\n    uint256 newId = _tokenIds.current();\\\\n    _mint(recipient, newId);\\\\n    _setTokenURI(newId, uri);\\\\n    _tokenIds.increment();\\\\n    return newId;\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0xed968a5ffda53b4f6389788010e54345302a9a2e304fda6175b858221b3a89fd\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b506040518060400160405280600581526020017f57654e46540000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f574e465400000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620001a6565b508060019080519060200190620000af929190620001a6565b505050620000d2620000c6620000d860201b60201c565b620000e060201b60201c565b620002bb565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001b49062000256565b90600052602060002090601f016020900481019282620001d8576000855562000224565b82601f10620001f357805160ff191683800117855562000224565b8280016001018555821562000224579182015b828111156200022357825182559160200191906001019062000206565b5b50905062000233919062000237565b5090565b5b808211156200025257600081600090555060010162000238565b5090565b600060028204905060018216806200026f57607f821691505b602082108114156200028657620002856200028c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b612b6e80620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063b88d4fde11610071578063b88d4fde146102cd578063c87b56dd146102e9578063d0def52114610319578063e985e9c514610349578063f2fde38b1461037957610116565b8063715018a61461026b5780638da5cb5b1461027557806395d89b4114610293578063a22cb465146102b157610116565b806323b872dd116100e957806323b872dd146101b55780632a5c792a146101d157806342842e0e146101ef5780636352211e1461020b57806370a082311461023b57610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc14610169578063095ea7b314610199575b600080fd5b61013560048036038101906101309190611d25565b610395565b6040516101429190612538565b60405180910390f35b610153610477565b6040516101609190612553565b60405180910390f35b610183600480360381019061017e9190611d77565b610509565b60405161019091906124af565b60405180910390f35b6101b360048036038101906101ae9190611ce9565b61058e565b005b6101cf60048036038101906101ca9190611b8f565b6106a6565b005b6101d9610706565b6040516101e69190612516565b60405180910390f35b61020960048036038101906102049190611b8f565b610841565b005b61022560048036038101906102209190611d77565b610861565b60405161023291906124af565b60405180910390f35b61025560048036038101906102509190611b2a565b610913565b6040516102629190612755565b60405180910390f35b6102736109cb565b005b61027d610a53565b60405161028a91906124af565b60405180910390f35b61029b610a7d565b6040516102a89190612553565b60405180910390f35b6102cb60048036038101906102c69190611c59565b610b0f565b005b6102e760048036038101906102e29190611bde565b610b25565b005b61030360048036038101906102fe9190611d77565b610b87565b6040516103109190612553565b60405180910390f35b610333600480360381019061032e9190611c95565b610c44565b6040516103409190612755565b60405180910390f35b610363600480360381019061035e9190611b53565b610c7b565b6040516103709190612538565b60405180910390f35b610393600480360381019061038e9190611b2a565b610d0f565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061046057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610470575061046f82610e07565b5b9050919050565b606060008054610486906129c3565b80601f01602080910402602001604051908101604052809291908181526020018280546104b2906129c3565b80156104ff5780601f106104d4576101008083540402835291602001916104ff565b820191906000526020600020905b8154815290600101906020018083116104e257829003601f168201915b5050505050905090565b600061051482610e71565b610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a906126b5565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061059982610861565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060190612715565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610629610edd565b73ffffffffffffffffffffffffffffffffffffffff161480610658575061065781610652610edd565b610c7b565b5b610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e90612635565b60405180910390fd5b6106a18383610ee5565b505050565b6106b76106b1610edd565b82610f9e565b6106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90612735565b60405180910390fd5b61070183838361107c565b505050565b6060600061071460076112d8565b90506000808267ffffffffffffffff811115610759577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561079257816020015b61077f611934565b8152602001906001900390816107775790505b50905060005b83811015610837576107a983610e71565b156108165760006107b984610b87565b9050604051806040016040528085815260200182815250838581518110610809577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250505b8280610821906129f5565b935050808061082f906129f5565b915050610798565b5080935050505090565b61085c83838360405180602001604052806000815250610b25565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090190612675565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90612655565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109d3610edd565b73ffffffffffffffffffffffffffffffffffffffff166109f1610a53565b73ffffffffffffffffffffffffffffffffffffffff1614610a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3e906126d5565b60405180910390fd5b610a5160006112e6565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610a8c906129c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab8906129c3565b8015610b055780601f10610ada57610100808354040283529160200191610b05565b820191906000526020600020905b815481529060010190602001808311610ae857829003601f168201915b5050505050905090565b610b21610b1a610edd565b83836113ac565b5050565b610b36610b30610edd565b83610f9e565b610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c90612735565b60405180910390fd5b610b8184848484611519565b50505050565b6060610b9282610e71565b610b9b57600080fd5b6000600860008481526020019081526020016000208054610bbb906129c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610be7906129c3565b8015610c345780601f10610c0957610100808354040283529160200191610c34565b820191906000526020600020905b815481529060010190602001808311610c1757829003601f168201915b5050505050905080915050919050565b600080610c5160076112d8565b9050610c5d8482611575565b610c678184611743565b610c71600761176f565b8091505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d17610edd565b73ffffffffffffffffffffffffffffffffffffffff16610d35610a53565b73ffffffffffffffffffffffffffffffffffffffff1614610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d82906126d5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df290612595565b60405180910390fd5b610e04816112e6565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f5883610861565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610fa982610e71565b610fe8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdf90612615565b60405180910390fd5b6000610ff383610861565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061106257508373ffffffffffffffffffffffffffffffffffffffff1661104a84610509565b73ffffffffffffffffffffffffffffffffffffffff16145b8061107357506110728185610c7b565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661109c82610861565b73ffffffffffffffffffffffffffffffffffffffff16146110f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e9906126f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611162576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611159906125d5565b60405180910390fd5b61116d838383611785565b611178600082610ee5565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111c891906128d9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121f9190612883565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081600001549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561141b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611412906125f5565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161150c9190612538565b60405180910390a3505050565b61152484848461107c565b6115308484848461178a565b61156f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156690612575565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dc90612695565b60405180910390fd5b6115ee81610e71565b1561162e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611625906125b5565b60405180910390fd5b61163a60008383611785565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461168a9190612883565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b8060086000848152602001908152602001600020908051906020019061176a92919061194e565b505050565b6001816000016000828254019250508190555050565b505050565b60006117ab8473ffffffffffffffffffffffffffffffffffffffff16611921565b15611914578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026117d4610edd565b8786866040518563ffffffff1660e01b81526004016117f694939291906124ca565b602060405180830381600087803b15801561181057600080fd5b505af192505050801561184157506040513d601f19601f8201168201806040525081019061183e9190611d4e565b60015b6118c4573d8060008114611871576040519150601f19603f3d011682016040523d82523d6000602084013e611876565b606091505b506000815114156118bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b390612575565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611919565b600190505b949350505050565b600080823b905060008111915050919050565b604051806040016040528060008152602001606081525090565b82805461195a906129c3565b90600052602060002090601f01602090048101928261197c57600085556119c3565b82601f1061199557805160ff19168380011785556119c3565b828001600101855582156119c3579182015b828111156119c25782518255916020019190600101906119a7565b5b5090506119d091906119d4565b5090565b5b808211156119ed5760008160009055506001016119d5565b5090565b6000611a046119ff846127a1565b612770565b905082815260208101848484011115611a1c57600080fd5b611a27848285612981565b509392505050565b6000611a42611a3d846127d1565b612770565b905082815260208101848484011115611a5a57600080fd5b611a65848285612981565b509392505050565b600081359050611a7c81612adc565b92915050565b600081359050611a9181612af3565b92915050565b600081359050611aa681612b0a565b92915050565b600081519050611abb81612b0a565b92915050565b600082601f830112611ad257600080fd5b8135611ae28482602086016119f1565b91505092915050565b600082601f830112611afc57600080fd5b8135611b0c848260208601611a2f565b91505092915050565b600081359050611b2481612b21565b92915050565b600060208284031215611b3c57600080fd5b6000611b4a84828501611a6d565b91505092915050565b60008060408385031215611b6657600080fd5b6000611b7485828601611a6d565b9250506020611b8585828601611a6d565b9150509250929050565b600080600060608486031215611ba457600080fd5b6000611bb286828701611a6d565b9350506020611bc386828701611a6d565b9250506040611bd486828701611b15565b9150509250925092565b60008060008060808587031215611bf457600080fd5b6000611c0287828801611a6d565b9450506020611c1387828801611a6d565b9350506040611c2487828801611b15565b925050606085013567ffffffffffffffff811115611c4157600080fd5b611c4d87828801611ac1565b91505092959194509250565b60008060408385031215611c6c57600080fd5b6000611c7a85828601611a6d565b9250506020611c8b85828601611a82565b9150509250929050565b60008060408385031215611ca857600080fd5b6000611cb685828601611a6d565b925050602083013567ffffffffffffffff811115611cd357600080fd5b611cdf85828601611aeb565b9150509250929050565b60008060408385031215611cfc57600080fd5b6000611d0a85828601611a6d565b9250506020611d1b85828601611b15565b9150509250929050565b600060208284031215611d3757600080fd5b6000611d4584828501611a97565b91505092915050565b600060208284031215611d6057600080fd5b6000611d6e84828501611aac565b91505092915050565b600060208284031215611d8957600080fd5b6000611d9784828501611b15565b91505092915050565b6000611dac8383612454565b905092915050565b611dbd8161290d565b82525050565b6000611dce82612811565b611dd8818561283f565b935083602082028501611dea85612801565b8060005b85811015611e265784840389528151611e078582611da0565b9450611e1283612832565b925060208a01995050600181019050611dee565b50829750879550505050505092915050565b611e418161291f565b82525050565b6000611e528261281c565b611e5c8185612850565b9350611e6c818560208601612990565b611e7581612acb565b840191505092915050565b6000611e8b82612827565b611e958185612861565b9350611ea5818560208601612990565b611eae81612acb565b840191505092915050565b6000611ec482612827565b611ece8185612872565b9350611ede818560208601612990565b611ee781612acb565b840191505092915050565b6000611eff603283612872565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000611f65602683612872565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611fcb601c83612872565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b600061200b602483612872565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612071601983612872565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b60006120b1602c83612872565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000612117603883612872565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061217d602a83612872565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006121e3602983612872565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612249602083612872565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000612289602c83612872565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006122ef602083612872565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061232f602983612872565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612395602183612872565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006123fb603183612872565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b600060408301600083015161246c6000860182612491565b50602083015184820360208601526124848282611e80565b9150508091505092915050565b61249a81612977565b82525050565b6124a981612977565b82525050565b60006020820190506124c46000830184611db4565b92915050565b60006080820190506124df6000830187611db4565b6124ec6020830186611db4565b6124f960408301856124a0565b818103606083015261250b8184611e47565b905095945050505050565b600060208201905081810360008301526125308184611dc3565b905092915050565b600060208201905061254d6000830184611e38565b92915050565b6000602082019050818103600083015261256d8184611eb9565b905092915050565b6000602082019050818103600083015261258e81611ef2565b9050919050565b600060208201905081810360008301526125ae81611f58565b9050919050565b600060208201905081810360008301526125ce81611fbe565b9050919050565b600060208201905081810360008301526125ee81611ffe565b9050919050565b6000602082019050818103600083015261260e81612064565b9050919050565b6000602082019050818103600083015261262e816120a4565b9050919050565b6000602082019050818103600083015261264e8161210a565b9050919050565b6000602082019050818103600083015261266e81612170565b9050919050565b6000602082019050818103600083015261268e816121d6565b9050919050565b600060208201905081810360008301526126ae8161223c565b9050919050565b600060208201905081810360008301526126ce8161227c565b9050919050565b600060208201905081810360008301526126ee816122e2565b9050919050565b6000602082019050818103600083015261270e81612322565b9050919050565b6000602082019050818103600083015261272e81612388565b9050919050565b6000602082019050818103600083015261274e816123ee565b9050919050565b600060208201905061276a60008301846124a0565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561279757612796612a9c565b5b8060405250919050565b600067ffffffffffffffff8211156127bc576127bb612a9c565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156127ec576127eb612a9c565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061288e82612977565b915061289983612977565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128ce576128cd612a3e565b5b828201905092915050565b60006128e482612977565b91506128ef83612977565b92508282101561290257612901612a3e565b5b828203905092915050565b600061291882612957565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156129ae578082015181840152602081019050612993565b838111156129bd576000848401525b50505050565b600060028204905060018216806129db57607f821691505b602082108114156129ef576129ee612a6d565b5b50919050565b6000612a0082612977565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a3357612a32612a3e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b612ae58161290d565b8114612af057600080fd5b50565b612afc8161291f565b8114612b0757600080fd5b50565b612b138161292b565b8114612b1e57600080fd5b50565b612b2a81612977565b8114612b3557600080fd5b5056fea2646970667358221220ebbcf46a419add972c05e2b800cdb29dcacf9e244dab0750d33eb86af867f52464736f6c63430008000033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063b88d4fde11610071578063b88d4fde146102cd578063c87b56dd146102e9578063d0def52114610319578063e985e9c514610349578063f2fde38b1461037957610116565b8063715018a61461026b5780638da5cb5b1461027557806395d89b4114610293578063a22cb465146102b157610116565b806323b872dd116100e957806323b872dd146101b55780632a5c792a146101d157806342842e0e146101ef5780636352211e1461020b57806370a082311461023b57610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc14610169578063095ea7b314610199575b600080fd5b61013560048036038101906101309190611d25565b610395565b6040516101429190612538565b60405180910390f35b610153610477565b6040516101609190612553565b60405180910390f35b610183600480360381019061017e9190611d77565b610509565b60405161019091906124af565b60405180910390f35b6101b360048036038101906101ae9190611ce9565b61058e565b005b6101cf60048036038101906101ca9190611b8f565b6106a6565b005b6101d9610706565b6040516101e69190612516565b60405180910390f35b61020960048036038101906102049190611b8f565b610841565b005b61022560048036038101906102209190611d77565b610861565b60405161023291906124af565b60405180910390f35b61025560048036038101906102509190611b2a565b610913565b6040516102629190612755565b60405180910390f35b6102736109cb565b005b61027d610a53565b60405161028a91906124af565b60405180910390f35b61029b610a7d565b6040516102a89190612553565b60405180910390f35b6102cb60048036038101906102c69190611c59565b610b0f565b005b6102e760048036038101906102e29190611bde565b610b25565b005b61030360048036038101906102fe9190611d77565b610b87565b6040516103109190612553565b60405180910390f35b610333600480360381019061032e9190611c95565b610c44565b6040516103409190612755565b60405180910390f35b610363600480360381019061035e9190611b53565b610c7b565b6040516103709190612538565b60405180910390f35b610393600480360381019061038e9190611b2a565b610d0f565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061046057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610470575061046f82610e07565b5b9050919050565b606060008054610486906129c3565b80601f01602080910402602001604051908101604052809291908181526020018280546104b2906129c3565b80156104ff5780601f106104d4576101008083540402835291602001916104ff565b820191906000526020600020905b8154815290600101906020018083116104e257829003601f168201915b5050505050905090565b600061051482610e71565b610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054a906126b5565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061059982610861565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060190612715565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610629610edd565b73ffffffffffffffffffffffffffffffffffffffff161480610658575061065781610652610edd565b610c7b565b5b610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e90612635565b60405180910390fd5b6106a18383610ee5565b505050565b6106b76106b1610edd565b82610f9e565b6106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90612735565b60405180910390fd5b61070183838361107c565b505050565b6060600061071460076112d8565b90506000808267ffffffffffffffff811115610759577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561079257816020015b61077f611934565b8152602001906001900390816107775790505b50905060005b83811015610837576107a983610e71565b156108165760006107b984610b87565b9050604051806040016040528085815260200182815250838581518110610809577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250505b8280610821906129f5565b935050808061082f906129f5565b915050610798565b5080935050505090565b61085c83838360405180602001604052806000815250610b25565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561090a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090190612675565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90612655565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109d3610edd565b73ffffffffffffffffffffffffffffffffffffffff166109f1610a53565b73ffffffffffffffffffffffffffffffffffffffff1614610a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3e906126d5565b60405180910390fd5b610a5160006112e6565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610a8c906129c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab8906129c3565b8015610b055780601f10610ada57610100808354040283529160200191610b05565b820191906000526020600020905b815481529060010190602001808311610ae857829003601f168201915b5050505050905090565b610b21610b1a610edd565b83836113ac565b5050565b610b36610b30610edd565b83610f9e565b610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c90612735565b60405180910390fd5b610b8184848484611519565b50505050565b6060610b9282610e71565b610b9b57600080fd5b6000600860008481526020019081526020016000208054610bbb906129c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610be7906129c3565b8015610c345780601f10610c0957610100808354040283529160200191610c34565b820191906000526020600020905b815481529060010190602001808311610c1757829003601f168201915b5050505050905080915050919050565b600080610c5160076112d8565b9050610c5d8482611575565b610c678184611743565b610c71600761176f565b8091505092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d17610edd565b73ffffffffffffffffffffffffffffffffffffffff16610d35610a53565b73ffffffffffffffffffffffffffffffffffffffff1614610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d82906126d5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df290612595565b60405180910390fd5b610e04816112e6565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f5883610861565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610fa982610e71565b610fe8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdf90612615565b60405180910390fd5b6000610ff383610861565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061106257508373ffffffffffffffffffffffffffffffffffffffff1661104a84610509565b73ffffffffffffffffffffffffffffffffffffffff16145b8061107357506110728185610c7b565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661109c82610861565b73ffffffffffffffffffffffffffffffffffffffff16146110f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e9906126f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611162576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611159906125d5565b60405180910390fd5b61116d838383611785565b611178600082610ee5565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111c891906128d9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121f9190612883565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081600001549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561141b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611412906125f5565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161150c9190612538565b60405180910390a3505050565b61152484848461107c565b6115308484848461178a565b61156f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156690612575565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dc90612695565b60405180910390fd5b6115ee81610e71565b1561162e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611625906125b5565b60405180910390fd5b61163a60008383611785565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461168a9190612883565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b8060086000848152602001908152602001600020908051906020019061176a92919061194e565b505050565b6001816000016000828254019250508190555050565b505050565b60006117ab8473ffffffffffffffffffffffffffffffffffffffff16611921565b15611914578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026117d4610edd565b8786866040518563ffffffff1660e01b81526004016117f694939291906124ca565b602060405180830381600087803b15801561181057600080fd5b505af192505050801561184157506040513d601f19601f8201168201806040525081019061183e9190611d4e565b60015b6118c4573d8060008114611871576040519150601f19603f3d011682016040523d82523d6000602084013e611876565b606091505b506000815114156118bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b390612575565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611919565b600190505b949350505050565b600080823b905060008111915050919050565b604051806040016040528060008152602001606081525090565b82805461195a906129c3565b90600052602060002090601f01602090048101928261197c57600085556119c3565b82601f1061199557805160ff19168380011785556119c3565b828001600101855582156119c3579182015b828111156119c25782518255916020019190600101906119a7565b5b5090506119d091906119d4565b5090565b5b808211156119ed5760008160009055506001016119d5565b5090565b6000611a046119ff846127a1565b612770565b905082815260208101848484011115611a1c57600080fd5b611a27848285612981565b509392505050565b6000611a42611a3d846127d1565b612770565b905082815260208101848484011115611a5a57600080fd5b611a65848285612981565b509392505050565b600081359050611a7c81612adc565b92915050565b600081359050611a9181612af3565b92915050565b600081359050611aa681612b0a565b92915050565b600081519050611abb81612b0a565b92915050565b600082601f830112611ad257600080fd5b8135611ae28482602086016119f1565b91505092915050565b600082601f830112611afc57600080fd5b8135611b0c848260208601611a2f565b91505092915050565b600081359050611b2481612b21565b92915050565b600060208284031215611b3c57600080fd5b6000611b4a84828501611a6d565b91505092915050565b60008060408385031215611b6657600080fd5b6000611b7485828601611a6d565b9250506020611b8585828601611a6d565b9150509250929050565b600080600060608486031215611ba457600080fd5b6000611bb286828701611a6d565b9350506020611bc386828701611a6d565b9250506040611bd486828701611b15565b9150509250925092565b60008060008060808587031215611bf457600080fd5b6000611c0287828801611a6d565b9450506020611c1387828801611a6d565b9350506040611c2487828801611b15565b925050606085013567ffffffffffffffff811115611c4157600080fd5b611c4d87828801611ac1565b91505092959194509250565b60008060408385031215611c6c57600080fd5b6000611c7a85828601611a6d565b9250506020611c8b85828601611a82565b9150509250929050565b60008060408385031215611ca857600080fd5b6000611cb685828601611a6d565b925050602083013567ffffffffffffffff811115611cd357600080fd5b611cdf85828601611aeb565b9150509250929050565b60008060408385031215611cfc57600080fd5b6000611d0a85828601611a6d565b9250506020611d1b85828601611b15565b9150509250929050565b600060208284031215611d3757600080fd5b6000611d4584828501611a97565b91505092915050565b600060208284031215611d6057600080fd5b6000611d6e84828501611aac565b91505092915050565b600060208284031215611d8957600080fd5b6000611d9784828501611b15565b91505092915050565b6000611dac8383612454565b905092915050565b611dbd8161290d565b82525050565b6000611dce82612811565b611dd8818561283f565b935083602082028501611dea85612801565b8060005b85811015611e265784840389528151611e078582611da0565b9450611e1283612832565b925060208a01995050600181019050611dee565b50829750879550505050505092915050565b611e418161291f565b82525050565b6000611e528261281c565b611e5c8185612850565b9350611e6c818560208601612990565b611e7581612acb565b840191505092915050565b6000611e8b82612827565b611e958185612861565b9350611ea5818560208601612990565b611eae81612acb565b840191505092915050565b6000611ec482612827565b611ece8185612872565b9350611ede818560208601612990565b611ee781612acb565b840191505092915050565b6000611eff603283612872565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000611f65602683612872565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611fcb601c83612872565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b600061200b602483612872565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612071601983612872565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b60006120b1602c83612872565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000612117603883612872565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061217d602a83612872565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006121e3602983612872565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612249602083612872565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000612289602c83612872565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006122ef602083612872565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061232f602983612872565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612395602183612872565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006123fb603183612872565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b600060408301600083015161246c6000860182612491565b50602083015184820360208601526124848282611e80565b9150508091505092915050565b61249a81612977565b82525050565b6124a981612977565b82525050565b60006020820190506124c46000830184611db4565b92915050565b60006080820190506124df6000830187611db4565b6124ec6020830186611db4565b6124f960408301856124a0565b818103606083015261250b8184611e47565b905095945050505050565b600060208201905081810360008301526125308184611dc3565b905092915050565b600060208201905061254d6000830184611e38565b92915050565b6000602082019050818103600083015261256d8184611eb9565b905092915050565b6000602082019050818103600083015261258e81611ef2565b9050919050565b600060208201905081810360008301526125ae81611f58565b9050919050565b600060208201905081810360008301526125ce81611fbe565b9050919050565b600060208201905081810360008301526125ee81611ffe565b9050919050565b6000602082019050818103600083015261260e81612064565b9050919050565b6000602082019050818103600083015261262e816120a4565b9050919050565b6000602082019050818103600083015261264e8161210a565b9050919050565b6000602082019050818103600083015261266e81612170565b9050919050565b6000602082019050818103600083015261268e816121d6565b9050919050565b600060208201905081810360008301526126ae8161223c565b9050919050565b600060208201905081810360008301526126ce8161227c565b9050919050565b600060208201905081810360008301526126ee816122e2565b9050919050565b6000602082019050818103600083015261270e81612322565b9050919050565b6000602082019050818103600083015261272e81612388565b9050919050565b6000602082019050818103600083015261274e816123ee565b9050919050565b600060208201905061276a60008301846124a0565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561279757612796612a9c565b5b8060405250919050565b600067ffffffffffffffff8211156127bc576127bb612a9c565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156127ec576127eb612a9c565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061288e82612977565b915061289983612977565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128ce576128cd612a3e565b5b828201905092915050565b60006128e482612977565b91506128ef83612977565b92508282101561290257612901612a3e565b5b828203905092915050565b600061291882612957565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156129ae578082015181840152602081019050612993565b838111156129bd576000848401525b50505050565b600060028204905060018216806129db57607f821691505b602082108114156129ef576129ee612a6d565b5b50919050565b6000612a0082612977565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a3357612a32612a3e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b612ae58161290d565b8114612af057600080fd5b50565b612afc8161291f565b8114612b0757600080fd5b50565b612b138161292b565b8114612b1e57600080fd5b50565b612b2a81612977565b8114612b3557600080fd5b5056fea2646970667358221220ebbcf46a419add972c05e2b800cdb29dcacf9e244dab0750d33eb86af867f52464736f6c63430008000033","devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":130,"contract":"contracts/NFT.sol:NFT","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":132,"contract":"contracts/NFT.sol:NFT","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":136,"contract":"contracts/NFT.sol:NFT","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":140,"contract":"contracts/NFT.sol:NFT","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":144,"contract":"contracts/NFT.sol:NFT","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":150,"contract":"contracts/NFT.sol:NFT","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":7,"contract":"contracts/NFT.sol:NFT","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":1884,"contract":"contracts/NFT.sol:NFT","label":"_tokenIds","offset":0,"slot":"7","type":"t_struct(Counter)1421_storage"},{"astId":1888,"contract":"contracts/NFT.sol:NFT","label":"_tokenURIs","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)1421_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":1420,"contract":"contracts/NFT.sol:NFT","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},428:function(f,e,n){"use strict";(function(f){var t=n(27),a=n(7),r=n(98),s=(n(741),n(10)),o=n(297).create({host:"ipfs.infura.io",port:5001,protocol:"https"});e.a=function(){var e=Object(r.b)(),n=e.uploadVideo,i=(e.contract,e.loading,Object(a.useState)(null)),b=Object(t.a)(i,2),d=b[0],c=b[1],l=Object(a.useState)(""),u=Object(t.a)(l,2),p=u[0],m=u[1],y=Object(a.useState)(""),v=Object(t.a)(y,2),h=v[0],g=v[1],w=Object(a.useState)(0),I=Object(t.a)(w,2),k=I[0],C=I[1],x=Object(a.useState)(!1),O=Object(t.a)(x,2),T=O[0],_=O[1];return Object(s.jsxs)("div",{className:"discussion-form",children:[Object(s.jsxs)("div",{className:"discussion-row",children:[Object(s.jsx)("input",{value:p,onChange:function(f){return m(f.target.value)},placeholder:"Enter title",className:"video-title"}),Object(s.jsx)("input",{value:h,onChange:function(f){return g(f.target.value)},placeholder:"Enter issue",className:"video-title"})]}),Object(s.jsx)("br",{}),Object(s.jsx)("input",{onChange:function(e){return function(e){var n=e.target.files[0];window.URL=window.URL||window.webkitURL;var t=document.createElement("video");t.preload="metadata",t.onloadedmetadata=function(){window.URL.revokeObjectURL(t.src),console.log(t.duration),C(t.duration)};var a=new window.FileReader;a.readAsArrayBuffer(n),a.onloadend=function(){c(f(a.result))}}(e)},accept:".mp4, .ogg, .mkv, .wmv",id:"upload",type:"file"}),Object(s.jsx)("button",{onClick:function(){d&&""!==p&&""!==h&&k<60?(_(!0),o.add(d).then((function(f){n(f.path,p,h).then((function(){_(!1),alert("New discussion created successfully!")}))}))):k>60?alert("Video duration should not be more than a minute."):alert("Title or issue should not be empty.")},className:"video-upload",children:T?"Loading...":"Create discussion"})]})}}).call(this,n(17).Buffer)},439:function(f,e,n){},440:function(f,e,n){},443:function(f,e){},450:function(f,e,n){},451:function(f,e,n){},452:function(f,e,n){},454:function(f,e,n){},455:function(f,e,n){},457:function(f,e,n){},568:function(f,e){},731:function(f,e){},738:function(f,e,n){},741:function(f,e,n){},742:function(f,e,n){},776:function(f,e){},778:function(f,e){},794:function(f,e){},796:function(f,e){},80:function(f,e,n){"use strict";n.d(e,"a",(function(){return m})),n.d(e,"b",(function(){return y}));var t=n(27),a=n(61),r=n(2),s=n.n(r),o=n(7),i=n(421),b=n.n(i),d=n(186),c=n(59),l=n(10),u=new b.a({cacheProvider:!0,providerOptions:{},theme:"dark"}),p=Object(o.createContext)({provider:void 0,signer:void 0,address:"",web3Modal:u,loadWeb3Modal:function(){var f=Object(a.a)(s.a.mark((function f(){return s.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:case"end":return f.stop()}}),f)})));return function(){return f.apply(this,arguments)}}(),logoutOfWeb3Modal:function(){var f=Object(a.a)(s.a.mark((function f(){return s.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:case"end":return f.stop()}}),f)})));return function(){return f.apply(this,arguments)}}()}),m=function(f){var e=f.children,n=Object(o.useState)(),r=Object(t.a)(n,2),i=r[0],b=r[1],m=Object(o.useState)(),y=Object(t.a)(m,2),v=y[0],h=y[1],g=Object(o.useState)(""),w=Object(t.a)(g,2),I=w[0],k=w[1],C=Object(o.useState)(),x=Object(t.a)(C,2),O=x[0],T=x[1];Object(o.useEffect)((function(){O&&(O.on("accountsChanged",(function(){window.location.reload()})),O.on("chainChanged",(function(){window.location.reload()})))}),[O]);var _=Object(o.useCallback)(Object(a.a)(s.a.mark((function f(){var e,n,t;return s.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:return f.next=2,u.connect();case 2:return e=f.sent,T(e),n=new d.a(e),b(n),t=n.getSigner(),h(t),f.t0=k,f.next=11,t.getAddress();case 11:f.t1=f.sent,(0,f.t0)(f.t1);case 13:case"end":return f.stop()}}),f)}))),[]),R=Object(o.useCallback)(Object(a.a)(s.a.mark((function f(){return s.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:O&&O.close&&O.close(),u.clearCachedProvider(),window.location.reload();case 3:case"end":return f.stop()}}),f)}))),[O]);return Object(o.useEffect)((function(){if(u.cachedProvider)_();else{var f=new c.a("https://stardust.metis.io/?owner=588");b(f)}}),[]),Object(l.jsx)(p.Provider,{value:{provider:i,signer:v,address:I,web3Modal:u,loadWeb3Modal:_,logoutOfWeb3Modal:R},children:e})},y=function(){return Object(o.useContext)(p)}},800:function(f,e){},818:function(f,e){},820:function(f,e){},952:function(f,e){},953:function(f,e){},98:function(f,e,n){"use strict";n.d(e,"a",(function(){return v})),n.d(e,"b",(function(){return h}));var t=n(42),a=n(61),r=n(27),s=n(2),o=n.n(s),i=n(7),b=n(80),d=n(189),c=n(254);function l(f){return new d.a.Contract(c.address,c.abi,f)}var u=n(255);function p(f){return new d.a.Contract(u.address,u.abi,f)}var m=n(10),y=Object(i.createContext)(),v=function(f){var e=f.children,n=Object(b.b)(),s=n.provider,d=n.signer,c=Object(i.useState)(null),u=Object(r.a)(c,2),v=u[0],h=u[1],g=Object(i.useState)(null),w=Object(r.a)(g,2),I=w[0],k=w[1],C=Object(i.useState)(null),x=Object(r.a)(C,2),O=x[0],T=x[1],_=Object(i.useState)(!1),R=Object(r.a)(_,2),j=R[0],E=R[1],A=Object(i.useState)([]),S=Object(r.a)(A,2),M=S[0],F=S[1];Object(i.useEffect)(Object(a.a)(o.a.mark((function f(){return o.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:if(s){f.next=2;break}return f.abrupt("return");case 2:h(l(d)),k(p(d||s)),T(l(s));case 5:case"end":return f.stop()}}),f)}))),[s,d]);var N=function(){var f=Object(a.a)(o.a.mark((function f(){var e,n;return o.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:return E(!0),f.next=3,O.videoCount();case 3:for(e=f.sent,n=e;n>=1;n--)O.videos(n).then((function(f){F((function(e){return[].concat(Object(t.a)(e),[f])}))}));E(!1);case 6:case"end":return f.stop()}}),f)})));return function(){return f.apply(this,arguments)}}(),q=function(){var f=Object(a.a)(o.a.mark((function f(e,n,t){return o.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:return E(!0),f.next=3,v.uploadVideo(e,n,t);case 3:E(!1);case 4:case"end":return f.stop()}}),f)})));return function(e,n,t){return f.apply(this,arguments)}}();return Object(m.jsx)(y.Provider,{value:{videos:M,getVideos:N,loading:j,contract:v,uploadVideo:q,readOnlyContract:O,setVideos:F,nft:I},children:e})},h=function(){return Object(i.useContext)(y)}},998:function(f){f.exports=JSON.parse("{}")},999:function(f){f.exports=JSON.parse("{}")}},[[1001,1,2]]]);
//# sourceMappingURL=main.83318d4f.chunk.js.map